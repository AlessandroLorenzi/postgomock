// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AlessandroLorenzi/postgomock/mypackage (interfaces: Xyz)

// Package mypackage is a generated GoMock package.
package mypackage

import (
	reflect "reflect"

	xyz "github.com/AlessandroLorenzi/postgomock/xyz"
	gomock "github.com/golang/mock/gomock"
)

// MockXyz is a mock of Xyz interface.
type MockXyz struct {
	ctrl     *gomock.Controller
	recorder *MockXyzMockRecorder
}

// MockXyzMockRecorder is the mock recorder for MockXyz.
type MockXyzMockRecorder struct {
	mock *MockXyz
}

// NewMockXyz creates a new mock instance.
func NewMockXyz(ctrl *gomock.Controller) *MockXyz {
	mock := &MockXyz{ctrl: ctrl}
	mock.recorder = &MockXyzMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXyz) EXPECT() *MockXyzMockRecorder {
	return m.recorder
}

// GetInfo mocks base method.
func (m *MockXyz) GetInfo(arg0 int) (*xyz.GetInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", arg0)
	ret0, _ := ret[0].(*xyz.GetInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockXyzMockRecorder) GetInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockXyz)(nil).GetInfo), arg0)
}
